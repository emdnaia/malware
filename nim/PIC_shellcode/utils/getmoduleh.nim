import winim 

import memcmp

template doWhile(a, b: untyped): untyped =
  b
  while a:
    b

proc getPEB*(): PPEB {.asmNoStackFrame.} =
  asm """
    push rbx
    xor rbx, rbx 
    xor rax, rax
    mov rbx, qword ptr gs:[0x60]
    mov rax, rbx
    pop rbx
    ret
  """


proc getModuleHandleReplacement*(lpModuleName: cstring): HMODULE =
  var pPeb: PPEB = getPEB()

  var 
    pLdr: PPEB_LDR_DATA = pPeb.Ldr
    pDte: PLDR_DATA_TABLE_ENTRY = cast[PLDR_DATA_TABLE_ENTRY](pLdr.InMemoryOrderModuleList.Flink)
    pListHead: LIST_ENTRY = pPeb.Ldr.InMemoryOrderModuleList
    pListNode: PLIST_ENTRY = pListHead.Flink
  
  doWhile cast[int](pListNode) != cast[int](pListHead):
    if pDte.FullDllName.Length != 0:
      if memcmp(cast[uint](lpModuleName), cast[uint](pDte.FullDllName.Buffer), lpModuleName.len, 2) == 0:
        return cast[HMODULE](pDte.Reserved2[0])
    pDte = cast[PLDR_DATA_TABLE_ENTRY](pListNode.Flink)
    pListNode = cast[PLIST_ENTRY](pListNode.Flink)

  return cast[HMODULE](0)