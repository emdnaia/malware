import utils/[getmoduleh, getprocaddr, hash]
import winim

# declaring WinExec
type VirtualAlloc = proc(lpAddress: LPVOID, dwSize: SIZE_T, flAllocationType: DWORD, flProtect: DWORD): int {.stdcall.}

proc main() {.asmNoStackFrame, inline, noreturn.} =
  asm """
    and rsp, 0xfffffffffffffff0
    mov rbp, rsp
    # since no stack frame is generated from main, we manage the stack size
    #sub rsp, 0x100    # allocate stack space, arbitrary size ... depends on payload
  """


  const 
    hashVirtualAlloc = hashStringDjb2A("VirtualAlloc".cstring)

  var
    h: HMODULE = locateKernel32() 
    pVirtualAlloc: VirtualAlloc = cast[VirtualAlloc](getProcAddressHash(h, hashVirtualAlloc))

  var p0 = pVirtualAlloc(NULL, cast[SIZE_T](1000), MEM_RESERVE, PAGE_READWRITE)
  asm "ret"


when isMainModule:
  main()